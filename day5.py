#print语句、import语句、赋值语句
#print语句可以打印多个参数，打印一个参数的时候，要么这个表达式是字符串，要么将自动转换成字符串。
#print语句打印多个参数的时候，用逗号分隔开，默认分隔符为空格，可以自定义分隔符和结束字符串。
#import语句可以使用as子句指定别名。
#赋值语句可以给变量赋值、可以给数据结构的一部分赋值、可以给字典赋值还可以给其他类型赋值。
#可以同时（并行）给多个变量赋值。
#序列解包（或可迭代对象解包）：将一个序列（或任意可迭代对象）解包，并将得到的值存储到一系列的变量中。
#要解包的序列包含的元素个数必须与等号左边列出的目标个数相同，否则将发生异常。可使用*运算符来收集多余的值，这样就无须确保值和变量的个数相同。赋值语句的右边可以是任意类型的序列，但是带星号的变量最终包含的总是一个列表。
#链式赋值：用于将多个变量关联到同一个值。
#增强赋值：可将等号右边的运算符移到赋值运算符的前面。
#代码块：不是一种语句，是一组语句，可在满足条件是执行（if语句），可执行多次（循环），等等。代码块是通过缩进代码（即在前面加空格）来创建。
#在同一代码块中，各行代码的缩进两必须相同。在很多语言中，都使用一个特殊的单词或字符（如begin或{）来标识代码块的的其去起始位置，并使用另一个特殊的单词或字符（如end或}）来标识结束位置。
#在python中，使用:指出接下来的是一个代码块，并将该代码块中的每行代码都缩进相同的程度。
#条件或条件语句：用作布尔表达式（如用作if语句中的条件）时，下面的值都将被解释器视为假：False None 0 "" () [] {}
#标准值False和None、各个类型（包括浮点数、复数等）的数值0、空序列（如空字符串、空元组和空列表）以及空映射（如空字典）都被视为假。而其他值都视为真，包括特殊值True。
#有条件的执行和if语句：如果条件（if和冒号中间的表达式）为真就执行后续代码块，如果条件为假，就不执行。
#else子句是if语句的一部分，提供另一种选择。
#条件表达式 if else
#elif检查多个条件
#更复杂的运算符：比较运算符（和赋值一样，支持链式比较）、相同运算符（检查两个对象是否相同，不是相等，一般不用于不可变动的基本值）、成员资格检查运算符in
#字符串和序列的比较：字符串是根据字符的字母顺序进行比较的。字母都是Unicode字符，他们都是按码点排列的。可使用ord函数获取字母的顺序值，与chr函数的作用相反。
#布尔运算符：and和or。短路逻辑
#关键字：assert检查条件是否满足特定条件，可以在后面加一个断言说明。
#循环：while用于条件为真的时候反复执行、for根据需要为序列中的每个元素执行代码块（可迭代对象是可使用for循环进行遍历的对象）
#鉴于迭代（也就是遍历）特定范围内的数是一个常见的任务，python还提供了一个创建特定范围的内置函数range(类似切片，包括起始位置，不包括结束位置，如果提供一个位置，将把这个位置视为结束位置，并把起始位置视为0)。
#迭代字典：可使用序列解包。字典元素的排列顺序是不确定的，换言而之，迭代字典中的键或值时，一定会处理所有的键或值。但不知道处理的顺序。如果顺序很重要，可将键或值存储到一个列表中并对列表进行排序，在进行迭代。
#并行迭代同时迭代两个序列，可用zip内置函数，它将两个序列缝合起来，并返回一个由元组组成的序列。返回值是一个可迭代的对象，要查看其内容，可使用list将其转换为列表。缝合后可在循环中将元组解包。
#函数zip可用于缝合任意数量的序列。当序列长度不同时，函数zip将在最短的序列用完后停止缝合。
#迭代时获取索引，可使用内置函数enumerate，这个函数可让你能够迭代索引-值对，其中的索引是自动提供的。
#反向迭代和排序后在迭代：reversed和sorted函数。他们类似列表方法reverse和sort,但是可用于任何序列或可迭代的对象，且不就地修改对象，而是返回反转和排序后的版本。
#注意：sorted返回一个列表而reversed像zip那样返回一个更神秘的可迭代对象。无须关心它是什么，只管在for循环和join等方法中使用它，不会有任何问题。只是你不能对它执行索引和切片操作，也不能直接对它调用列表的方法。要执行这些操作，可先使用list对返回的对象进行转换。
#提示：要按字母表排序，可先转换为小写。为此，可将sort或sorted的key参数设置为str.lower。
#跳出循环：通常循环会不断执行代码块，直到条件为假或使用完序列中的元素。但是有些情况下，你可能想中断循环、开始新的迭代（进入“下一轮”代码块的执行流程）或直接结束循环。
#要跳出循环，可使用break。continue语句没有break用的多，它结束当前循环，并跳到下一次迭代开头。这意味着跳过循环体中余下的语句，但是不结束循环，这在循环体庞大复杂，且存在多个要跳过它的原因时很有用。
#while True / break
#循环中的else子句，可用于判断循环是正常结束的，还是中途跳出的。
#简单推导：列表推导是一种从其他列表中创建列表的方式，类似于数学中的集合推导。可以添加多个for循环和if语句
#使用圆括号代替方括号并不能实现元组推导，而是将创建生成器，然而可使用花括号来执行字典推导。在列表推导中，for循环前面只有一个表达式，而在字典推导中for循环前面有两个用冒号分隔的表达式。这两个表达式分别为键和其对应的值。
#三人行：pass、del、exec
#有时候什么都不用做，可以用pass语句表示什么都不做，也可插入一个字符串，这种字符串充当文档字符串。
#使用del语句删除对象的引用和名称本身，但是无法删除值。没有任何名称关联，无法获取或使用，python直接将其删除，这被称为垃圾收集。
#执行exec和eval执行字符串及计算其结果。警告：如果将部分内容由用户提供的字符串作为代码执行，将无法控制代码的行为。在网络应用程序，这样做十分危险。
#exec函数将字符串作为代码执行。然而，调用函数exec时只给它提供一个参数绝非好事。在大多数情况下，还应向它传递一个命名空间——用于放置变量的地方，否则代码将污染你的命名空间，即修改你的变量。命名空间（作用域）类似一个看不见的字典。
#eval是一个类似于exec的内置函数。exec执行一系列Python语句，而eval计算用字符串表示的Python表达式的值，并返回结果（exec什么都不返回，因为它本身是条语句）。与exec一样，可向eval提供一个命名空间，虽然表达式通常不会像语句那样给变量重新赋值。
#警告：虽然表达式通常不会给变量重新赋值，但绝对能够这样做。
#小结：打印语句，导入语句，赋值语句，代码块，条件语句，断言，循环，推导。
