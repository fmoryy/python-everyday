#列表和元组
#数据结构：以某种方式（如通过编号）组合起来的数据元素（如数、字符乃至其他数据结构）集合。
#最基本的数据结构为序列。序列中的每个元素都有编号，即其位置或索引，其中第一个元素的索引是0，从0开始指出相对于序列开头的偏移量。用负索引表示序列末尾元素的位置。
#常用的序列有两种：元组和列表。元组是一种特殊的序列，类似于列表，只是不能修改。
#另一种常用的序列是字符串。
#列表可以修改，元组不可以修改。这意味着列表可以中途修改，而元组禁止修改序列。有些内置函数出于此原因返回元组。
#在自己编写程序的时候，几乎在所有情况下都可以使用列表来替代元组。但是有一个例外，是将元组用作字典键。
#容器基本上就是可以包含其他对象的对象。两种主要的容器是序列（元组和列表）和映射（字典）。
#在序列中，每个元素都有编号，而在映射中，每个元素都有名称（也叫键）。有一种既不是序列也不是映射的容器是集合（set）。
#通用序列操作：索引、切片、相加、相乘和成员资格检查。
#字符串是由字符组成的序列。但是python没有专门用来表示字符的类型，因此一个字符就是只包含一个元素的字符串。
#索引：[编号]
#序列字面量索引和赋给变量后索引的效果是一样的。
#切片：[编号:编号:步长]
#切片的第一个索引是包含的第一个元素的编号，第二个索引是切片后余下的第一个元素的编号。
#如果切片的第一个索引位于第二个索引的后面，则结果为空序列。
#步长可以为负数，不过此时第一个索引是终点，第二个索引是起点。
#序列相加：可以用加法运算符来拼接序列。一般而言，不能拼接不同类型的序列。
#乘法：将序列和数x相乘，将重复这个序列x次来创建一个新序列。
#None表示什么都没有，空列表是使用不包含任何内容的两个方括号表示。
#成员资格：要检查特定的值是否包含在序列中，可使用运算符in。它检查是否满足指定的条件，并返回相应的值，满足时返回True,不满足时返回False。这样的运算符称为布尔运算符，真值称为布尔值。
#字符串包含的字符是其的成员或元素。
#内置函数len、min、max。len函数返回序列包含的元素的个数,min和max分别返回序列中最小和最大的元素。
#列表是可变的，即可修改其内容。另外列表有许多特有的方法。
#list类，可将任何序列作为list的实参，转换成列表。
#列表的操作：给元素赋值（使用索引表示法给特定位置元素赋值）、删除元素（使用del语句）、给切片赋值
#方法是与对象（列表、数、字符串等）联系紧密的函数。通常，像下面这样调用方法：object.method(arguments)。
#列表方法：append(将一个对象附加到列表末尾)、clear(清空列表内容)、copy(复制列表，即副本，和常规复制不一样，常规复制只是将另一个名称关联到列表)、count(计算指定元素在列表中出现了几次)、extend(同时将多个值附加到列表末尾，可以用一个列表扩展另一个列表，不同于拼接，这里直接修改被扩展的列表)、index(在列表中查找指定值第一次出现的索引)、insert(将一个对象插入列表)、pop(从列表中删除一个元素，并返回这一元素，默认最后一个元素，唯一一个既修改列表又返回一个非None的值的列表方法)、remove(可用于删除第一个指定值的元素)、reverse(按相反的顺序排列列表中的元素)、sort(对列表进行就地排序)
#高级排序：方法sort可接受两个可选参数：key和reverse。这两个参数通常是按名称指定的，称为关键字参数。参数key设置为一个用于排序的函数。然而不会直接使用这个函数来判断一个元素是否比另一个元素小，而是使用它来为每个元素创建一个键，再根据这些键对元素进行排序。参数reverse只需将其指定为一个真值，以指出是否要按相反的顺序对列表进行排序。在很多情况，将参数key设置成一个自定义函数很有用。
#元组不能修改（字符串也不能修改）。元组的语法很简单，只要将一些值用逗号分隔开，就能自动创建一个元组。通常用圆括号括起来。只含有一个元素的元组比较特殊，必须在它后面加上逗号。
#tuple类将序列作为参数，并将其转换成元组。如果是元组，就原封不动的返回它。
#元组的创建和访问和其他序列一样。元组的切片还是元组。
#元组的用途：用作映射中的键，而列表不行；有些内置函数和方法返回元组。只要不尝试修改元组，和元组打交道通常意味着像处理列表一样处理它们。（需要使用元组没有的index和count等方法时例外）
#小结：序列、成员资格、方法。
#今日编程题：给定一个整数数组nums和一个整数目标值target,在这个数组中找出和为目标值的那两个整数，并返回它们的数组下标。
#要求：1.可以假设每种输入只会对应一个答案。但是，数组中的同一个元素不能使用两遍。
#2.可以按任意顺序返回答案。
#示例1：
#输入：nums=[2,7,11,15],target=9
#输出：[0,1]
#示例2：
#输入：nums=[3,2,4],target=6
#输出：[1,2]
#示例3：
#输入：nums=[3,3],target=6
#输出：[0,1]

