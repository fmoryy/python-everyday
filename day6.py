#函数：将语句组合成函数，告诉计算机如何完成任务，且只需要说一遍，无需反复向计算机传达详细指令。
#如果在一个地方编写了代码，但是需要再另一个地方再次使用，该怎么办？
#真正的程序员很懒，这里的懒不是贬义词，而是不做无谓的工作。
#抽象是程序能够被人理解的关键所在，（无论是对编写代码还是阅读代码，都是至关重要的）。
#计算机喜欢具体明确的指令，而人却喜欢抽象的。
#抽象的具体操作在其他地方（独立的函数定义）给出。
#内置函数callable：判断对象是否可调用。
#函数是结构化编程的核心。
#定义函数：使用def(表示定义函数)语句
#return语句很重要，用于从函数中返回值。
#要给函数编写文档，以确保其他人能看懂，可添加注释（以#开头的内容），还有一种编写注释的方法，就是添加独立的字符串。在有些地方，如def语句后面，添加字符串。放在函数开头的字符串称为文档字符串，将作为函数的一部分存储起来。
#_doc_是函数的一个属性，属性名中的双划线表示这是一个特殊的属性。
#特殊的内置函数help很有用，在交互式解释器中，可使用它获取有关函数的信息，其中包括函数的文档字符串。
#其实并不是函数的函数，在数学意义上的函数总是返回根据参数计算得到的结果。在python中，有些函数什么都不返回。在诸如Pascal等语言中，这样的函数可能 另有其名（如过程），但是在python中，函数就是函数，即使严格意义上并非函数。什么都不返回的函数不包括return语句，或者包括return语句，但是return语句后面没有指定值。
#有时候使用return语句只是为了结束函数。
#这有点像break，但是这里是跳出函数，不是跳出循环。
#所有函数都有返回值，没有指定，则返回None。
#编写函数的目的是为当前程序（甚至是其他程序）提供服务，你的职责是确保它在提供的参数正确时完成任务，并在参数不对时以显而易见的方式失败。（为此，通常使用断言或异常。）
#在def语句中，位于函数名后面的变量通常称为形参，而调用函数时提供的值称为实参。在很重要的情况下，会把实参称为值，以便将其与类似于变量的形参区分开。
#参数不过是变量而已，在函数内部给参数赋值对外部没有任何影响。参数存储在局部作用域内。